{"ast":null,"code":"import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n    var listeners = currentListeners = nextListeners;\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n  function observable() {\n    var _ref;\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n  var shapeAssertionError;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n    var hasChanged = false;\n    var nextState = {};\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n  var boundActionCreators = {};\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };","map":{"version":3,"names":["$$observable","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","proto","Object","getPrototypeOf","createStore","reducer","preloadedState","enhancer","_ref2","arguments","Error","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","unsubscribe","index","indexOf","splice","dispatch","action","type","listeners","i","length","replaceReducer","nextReducer","observable","_ref","outerSubscribe","observer","TypeError","observeState","next","warning","message","console","error","e","getUndefinedStateErrorMessage","key","actionType","actionDescription","String","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","call","match","unexpectedKeys","filter","hasOwnProperty","forEach","assertReducerShape","initialState","combineReducers","finalReducers","process","env","NODE_ENV","finalReducerKeys","shapeAssertionError","combination","state","warningMessage","hasChanged","nextState","_i","_key","previousStateForKey","nextStateForKey","errorMessage","bindActionCreator","actionCreator","apply","bindActionCreators","actionCreators","boundActionCreators","_defineProperty","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread2","target","source","getOwnPropertyDescriptors","defineProperties","compose","_len","funcs","Array","arg","reduce","a","b","applyMiddleware","middlewares","store","_dispatch","middlewareAPI","chain","map","middleware","isCrushed","name","__DO_NOT_USE__ActionTypes"],"sources":["C:/Users/jonna/OneDrive/Escritorio/PROGRAMACION/rick-morty-app/front/node_modules/redux/es/redux.js"],"sourcesContent":["import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAASA,YAAY,GAAG;EACzC,OAAOC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;AACpE,CAAC;AAED,IAAIC,WAAW,GAAG;EAChBC,IAAI,EAAE,cAAc,GAAGR,YAAY,EAAE;EACrCS,OAAO,EAAE,iBAAiB,GAAGT,YAAY,EAAE;EAC3CU,oBAAoB,EAAE,SAASA,oBAAoB,GAAG;IACpD,OAAO,8BAA8B,GAAGV,YAAY,EAAE;EACxD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASW,aAAa,CAACC,GAAG,EAAE;EAC1B,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,EAAE,OAAO,KAAK;EACzD,IAAIC,KAAK,GAAGD,GAAG;EAEf,OAAOE,MAAM,CAACC,cAAc,CAACF,KAAK,CAAC,KAAK,IAAI,EAAE;IAC5CA,KAAK,GAAGC,MAAM,CAACC,cAAc,CAACF,KAAK,CAAC;EACtC;EAEA,OAAOC,MAAM,CAACC,cAAc,CAACH,GAAG,CAAC,KAAKC,KAAK;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,WAAW,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,EAAE;EACtD,IAAIC,KAAK;EAET,IAAI,OAAOF,cAAc,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,UAAU,IAAI,OAAOA,QAAQ,KAAK,UAAU,IAAI,OAAOE,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;IAClJ,MAAM,IAAIC,KAAK,CAAC,2DAA2D,GAAG,8DAA8D,GAAG,gCAAgC,CAAC;EAClL;EAEA,IAAI,OAAOJ,cAAc,KAAK,UAAU,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;IAC3EA,QAAQ,GAAGD,cAAc;IACzBA,cAAc,GAAGK,SAAS;EAC5B;EAEA,IAAI,OAAOJ,QAAQ,KAAK,WAAW,EAAE;IACnC,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;MAClC,MAAM,IAAIG,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,OAAOH,QAAQ,CAACH,WAAW,CAAC,CAACC,OAAO,EAAEC,cAAc,CAAC;EACvD;EAEA,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;IACjC,MAAM,IAAIK,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EAEA,IAAIE,cAAc,GAAGP,OAAO;EAC5B,IAAIQ,YAAY,GAAGP,cAAc;EACjC,IAAIQ,gBAAgB,GAAG,EAAE;EACzB,IAAIC,aAAa,GAAGD,gBAAgB;EACpC,IAAIE,aAAa,GAAG,KAAK;EACzB;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASC,4BAA4B,GAAG;IACtC,IAAIF,aAAa,KAAKD,gBAAgB,EAAE;MACtCC,aAAa,GAAGD,gBAAgB,CAACI,KAAK,EAAE;IAC1C;EACF;EACA;AACF;AACA;AACA;AACA;;EAGE,SAASC,QAAQ,GAAG;IAClB,IAAIH,aAAa,EAAE;MACjB,MAAM,IAAIN,KAAK,CAAC,oEAAoE,GAAG,6DAA6D,GAAG,yEAAyE,CAAC;IACnO;IAEA,OAAOG,YAAY;EACrB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,SAASO,SAAS,CAACC,QAAQ,EAAE;IAC3B,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;MAClC,MAAM,IAAIX,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,IAAIM,aAAa,EAAE;MACjB,MAAM,IAAIN,KAAK,CAAC,qEAAqE,GAAG,sFAAsF,GAAG,oFAAoF,GAAG,kFAAkF,CAAC;IAC7V;IAEA,IAAIY,YAAY,GAAG,IAAI;IACvBL,4BAA4B,EAAE;IAC9BF,aAAa,CAACQ,IAAI,CAACF,QAAQ,CAAC;IAC5B,OAAO,SAASG,WAAW,GAAG;MAC5B,IAAI,CAACF,YAAY,EAAE;QACjB;MACF;MAEA,IAAIN,aAAa,EAAE;QACjB,MAAM,IAAIN,KAAK,CAAC,gFAAgF,GAAG,kFAAkF,CAAC;MACxL;MAEAY,YAAY,GAAG,KAAK;MACpBL,4BAA4B,EAAE;MAC9B,IAAIQ,KAAK,GAAGV,aAAa,CAACW,OAAO,CAACL,QAAQ,CAAC;MAC3CN,aAAa,CAACY,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAC9BX,gBAAgB,GAAG,IAAI;IACzB,CAAC;EACH;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,SAASc,QAAQ,CAACC,MAAM,EAAE;IACxB,IAAI,CAAC9B,aAAa,CAAC8B,MAAM,CAAC,EAAE;MAC1B,MAAM,IAAInB,KAAK,CAAC,iCAAiC,GAAG,0CAA0C,CAAC;IACjG;IAEA,IAAI,OAAOmB,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;MACtC,MAAM,IAAIpB,KAAK,CAAC,qDAAqD,GAAG,iCAAiC,CAAC;IAC5G;IAEA,IAAIM,aAAa,EAAE;MACjB,MAAM,IAAIN,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,IAAI;MACFM,aAAa,GAAG,IAAI;MACpBH,YAAY,GAAGD,cAAc,CAACC,YAAY,EAAEgB,MAAM,CAAC;IACrD,CAAC,SAAS;MACRb,aAAa,GAAG,KAAK;IACvB;IAEA,IAAIe,SAAS,GAAGjB,gBAAgB,GAAGC,aAAa;IAEhD,KAAK,IAAIiB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,SAAS,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IAAIX,QAAQ,GAAGU,SAAS,CAACC,CAAC,CAAC;MAC3BX,QAAQ,EAAE;IACZ;IAEA,OAAOQ,MAAM;EACf;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,SAASK,cAAc,CAACC,WAAW,EAAE;IACnC,IAAI,OAAOA,WAAW,KAAK,UAAU,EAAE;MACrC,MAAM,IAAIzB,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IAEAE,cAAc,GAAGuB,WAAW,CAAC,CAAC;IAC9B;IACA;IACA;;IAEAP,QAAQ,CAAC;MACPE,IAAI,EAAEnC,WAAW,CAACE;IACpB,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;;EAGE,SAASuC,UAAU,GAAG;IACpB,IAAIC,IAAI;IAER,IAAIC,cAAc,GAAGlB,SAAS;IAC9B,OAAOiB,IAAI,GAAG;MACZ;AACN;AACA;AACA;AACA;AACA;AACA;AACA;MACMjB,SAAS,EAAE,SAASA,SAAS,CAACmB,QAAQ,EAAE;QACtC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;UACrD,MAAM,IAAIC,SAAS,CAAC,wCAAwC,CAAC;QAC/D;QAEA,SAASC,YAAY,GAAG;UACtB,IAAIF,QAAQ,CAACG,IAAI,EAAE;YACjBH,QAAQ,CAACG,IAAI,CAACvB,QAAQ,EAAE,CAAC;UAC3B;QACF;QAEAsB,YAAY,EAAE;QACd,IAAIjB,WAAW,GAAGc,cAAc,CAACG,YAAY,CAAC;QAC9C,OAAO;UACLjB,WAAW,EAAEA;QACf,CAAC;MACH;IACF,CAAC,EAAEa,IAAI,CAAClD,YAAY,CAAC,GAAG,YAAY;MAClC,OAAO,IAAI;IACb,CAAC,EAAEkD,IAAI;EACT,CAAC,CAAC;EACF;EACA;;EAGAT,QAAQ,CAAC;IACPE,IAAI,EAAEnC,WAAW,CAACC;EACpB,CAAC,CAAC;EACF,OAAOY,KAAK,GAAG;IACboB,QAAQ,EAAEA,QAAQ;IAClBR,SAAS,EAAEA,SAAS;IACpBD,QAAQ,EAAEA,QAAQ;IAClBe,cAAc,EAAEA;EAClB,CAAC,EAAE1B,KAAK,CAACrB,YAAY,CAAC,GAAGiD,UAAU,EAAE5B,KAAK;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmC,OAAO,CAACC,OAAO,EAAE;EACxB;EACA,IAAI,OAAOC,OAAO,KAAK,WAAW,IAAI,OAAOA,OAAO,CAACC,KAAK,KAAK,UAAU,EAAE;IACzED,OAAO,CAACC,KAAK,CAACF,OAAO,CAAC;EACxB;EACA;;EAGA,IAAI;IACF;IACA;IACA;IACA,MAAM,IAAIlC,KAAK,CAACkC,OAAO,CAAC;EAC1B,CAAC,CAAC,OAAOG,CAAC,EAAE,CAAC,CAAC,CAAC;AAEjB;;AAEA,SAASC,6BAA6B,CAACC,GAAG,EAAEpB,MAAM,EAAE;EAClD,IAAIqB,UAAU,GAAGrB,MAAM,IAAIA,MAAM,CAACC,IAAI;EACtC,IAAIqB,iBAAiB,GAAGD,UAAU,IAAI,WAAW,GAAGE,MAAM,CAACF,UAAU,CAAC,GAAG,IAAI,IAAI,WAAW;EAC5F,OAAO,QAAQ,GAAGC,iBAAiB,GAAG,cAAc,GAAGF,GAAG,GAAG,yBAAyB,GAAG,sEAAsE,GAAG,sFAAsF;AAC1P;AAEA,SAASI,qCAAqC,CAACC,UAAU,EAAEC,QAAQ,EAAE1B,MAAM,EAAE2B,kBAAkB,EAAE;EAC/F,IAAIC,WAAW,GAAGvD,MAAM,CAACwD,IAAI,CAACH,QAAQ,CAAC;EACvC,IAAII,YAAY,GAAG9B,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAKnC,WAAW,CAACC,IAAI,GAAG,+CAA+C,GAAG,wCAAwC;EAE1J,IAAI6D,WAAW,CAACxB,MAAM,KAAK,CAAC,EAAE;IAC5B,OAAO,qEAAqE,GAAG,4DAA4D;EAC7I;EAEA,IAAI,CAAClC,aAAa,CAACuD,UAAU,CAAC,EAAE;IAC9B,OAAO,MAAM,GAAGK,YAAY,GAAG,4BAA4B,GAAG,CAAC,CAAC,CAACpE,QAAQ,CAACqE,IAAI,CAACN,UAAU,CAAC,CAACO,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,2DAA2D,IAAI,UAAU,GAAGJ,WAAW,CAAC/D,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;EACtO;EAEA,IAAIoE,cAAc,GAAG5D,MAAM,CAACwD,IAAI,CAACJ,UAAU,CAAC,CAACS,MAAM,CAAC,UAAUd,GAAG,EAAE;IACjE,OAAO,CAACM,QAAQ,CAACS,cAAc,CAACf,GAAG,CAAC,IAAI,CAACO,kBAAkB,CAACP,GAAG,CAAC;EAClE,CAAC,CAAC;EACFa,cAAc,CAACG,OAAO,CAAC,UAAUhB,GAAG,EAAE;IACpCO,kBAAkB,CAACP,GAAG,CAAC,GAAG,IAAI;EAChC,CAAC,CAAC;EACF,IAAIpB,MAAM,IAAIA,MAAM,CAACC,IAAI,KAAKnC,WAAW,CAACE,OAAO,EAAE;EAEnD,IAAIiE,cAAc,CAAC7B,MAAM,GAAG,CAAC,EAAE;IAC7B,OAAO,aAAa,IAAI6B,cAAc,CAAC7B,MAAM,GAAG,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC,GAAG,GAAG,IAAI,IAAI,GAAG6B,cAAc,CAACpE,IAAI,CAAC,MAAM,CAAC,GAAG,cAAc,GAAGiE,YAAY,GAAG,IAAI,CAAC,GAAG,0DAA0D,IAAI,IAAI,GAAGF,WAAW,CAAC/D,IAAI,CAAC,MAAM,CAAC,GAAG,sCAAsC,CAAC;EACnS;AACF;AAEA,SAASwE,kBAAkB,CAACX,QAAQ,EAAE;EACpCrD,MAAM,CAACwD,IAAI,CAACH,QAAQ,CAAC,CAACU,OAAO,CAAC,UAAUhB,GAAG,EAAE;IAC3C,IAAI5C,OAAO,GAAGkD,QAAQ,CAACN,GAAG,CAAC;IAC3B,IAAIkB,YAAY,GAAG9D,OAAO,CAACM,SAAS,EAAE;MACpCmB,IAAI,EAAEnC,WAAW,CAACC;IACpB,CAAC,CAAC;IAEF,IAAI,OAAOuE,YAAY,KAAK,WAAW,EAAE;MACvC,MAAM,IAAIzD,KAAK,CAAC,YAAY,GAAGuC,GAAG,GAAG,+CAA+C,GAAG,4DAA4D,GAAG,6DAA6D,GAAG,uEAAuE,GAAG,wCAAwC,CAAC;IAC3U;IAEA,IAAI,OAAO5C,OAAO,CAACM,SAAS,EAAE;MAC5BmB,IAAI,EAAEnC,WAAW,CAACG,oBAAoB;IACxC,CAAC,CAAC,KAAK,WAAW,EAAE;MAClB,MAAM,IAAIY,KAAK,CAAC,YAAY,GAAGuC,GAAG,GAAG,wDAAwD,IAAI,sBAAsB,GAAGtD,WAAW,CAACC,IAAI,GAAG,mCAAmC,CAAC,GAAG,uEAAuE,GAAG,iEAAiE,GAAG,qEAAqE,GAAG,uEAAuE,CAAC;IACpd;EACF,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASwE,eAAe,CAACb,QAAQ,EAAE;EACjC,IAAIE,WAAW,GAAGvD,MAAM,CAACwD,IAAI,CAACH,QAAQ,CAAC;EACvC,IAAIc,aAAa,GAAG,CAAC,CAAC;EAEtB,KAAK,IAAIrC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyB,WAAW,CAACxB,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIiB,GAAG,GAAGQ,WAAW,CAACzB,CAAC,CAAC;IAExB,IAAIsC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAI,OAAOjB,QAAQ,CAACN,GAAG,CAAC,KAAK,WAAW,EAAE;QACxCN,OAAO,CAAC,gCAAgC,GAAGM,GAAG,GAAG,IAAI,CAAC;MACxD;IACF;IAEA,IAAI,OAAOM,QAAQ,CAACN,GAAG,CAAC,KAAK,UAAU,EAAE;MACvCoB,aAAa,CAACpB,GAAG,CAAC,GAAGM,QAAQ,CAACN,GAAG,CAAC;IACpC;EACF;EAEA,IAAIwB,gBAAgB,GAAGvE,MAAM,CAACwD,IAAI,CAACW,aAAa,CAAC,CAAC,CAAC;EACnD;;EAEA,IAAIb,kBAAkB;EAEtB,IAAIc,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzChB,kBAAkB,GAAG,CAAC,CAAC;EACzB;EAEA,IAAIkB,mBAAmB;EAEvB,IAAI;IACFR,kBAAkB,CAACG,aAAa,CAAC;EACnC,CAAC,CAAC,OAAOtB,CAAC,EAAE;IACV2B,mBAAmB,GAAG3B,CAAC;EACzB;EAEA,OAAO,SAAS4B,WAAW,CAACC,KAAK,EAAE/C,MAAM,EAAE;IACzC,IAAI+C,KAAK,KAAK,KAAK,CAAC,EAAE;MACpBA,KAAK,GAAG,CAAC,CAAC;IACZ;IAEA,IAAIF,mBAAmB,EAAE;MACvB,MAAMA,mBAAmB;IAC3B;IAEA,IAAIJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAIK,cAAc,GAAGxB,qCAAqC,CAACuB,KAAK,EAAEP,aAAa,EAAExC,MAAM,EAAE2B,kBAAkB,CAAC;MAE5G,IAAIqB,cAAc,EAAE;QAClBlC,OAAO,CAACkC,cAAc,CAAC;MACzB;IACF;IAEA,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIC,SAAS,GAAG,CAAC,CAAC;IAElB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGP,gBAAgB,CAACxC,MAAM,EAAE+C,EAAE,EAAE,EAAE;MACnD,IAAIC,IAAI,GAAGR,gBAAgB,CAACO,EAAE,CAAC;MAC/B,IAAI3E,OAAO,GAAGgE,aAAa,CAACY,IAAI,CAAC;MACjC,IAAIC,mBAAmB,GAAGN,KAAK,CAACK,IAAI,CAAC;MACrC,IAAIE,eAAe,GAAG9E,OAAO,CAAC6E,mBAAmB,EAAErD,MAAM,CAAC;MAE1D,IAAI,OAAOsD,eAAe,KAAK,WAAW,EAAE;QAC1C,IAAIC,YAAY,GAAGpC,6BAA6B,CAACiC,IAAI,EAAEpD,MAAM,CAAC;QAC9D,MAAM,IAAInB,KAAK,CAAC0E,YAAY,CAAC;MAC/B;MAEAL,SAAS,CAACE,IAAI,CAAC,GAAGE,eAAe;MACjCL,UAAU,GAAGA,UAAU,IAAIK,eAAe,KAAKD,mBAAmB;IACpE;IAEAJ,UAAU,GAAGA,UAAU,IAAIL,gBAAgB,CAACxC,MAAM,KAAK/B,MAAM,CAACwD,IAAI,CAACkB,KAAK,CAAC,CAAC3C,MAAM;IAChF,OAAO6C,UAAU,GAAGC,SAAS,GAAGH,KAAK;EACvC,CAAC;AACH;AAEA,SAASS,iBAAiB,CAACC,aAAa,EAAE1D,QAAQ,EAAE;EAClD,OAAO,YAAY;IACjB,OAAOA,QAAQ,CAAC0D,aAAa,CAACC,KAAK,CAAC,IAAI,EAAE9E,SAAS,CAAC,CAAC;EACvD,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAS+E,kBAAkB,CAACC,cAAc,EAAE7D,QAAQ,EAAE;EACpD,IAAI,OAAO6D,cAAc,KAAK,UAAU,EAAE;IACxC,OAAOJ,iBAAiB,CAACI,cAAc,EAAE7D,QAAQ,CAAC;EACpD;EAEA,IAAI,OAAO6D,cAAc,KAAK,QAAQ,IAAIA,cAAc,KAAK,IAAI,EAAE;IACjE,MAAM,IAAI/E,KAAK,CAAC,wEAAwE,IAAI+E,cAAc,KAAK,IAAI,GAAG,MAAM,GAAG,OAAOA,cAAc,CAAC,GAAG,IAAI,GAAG,8FAA8F,CAAC;EAChQ;EAEA,IAAIC,mBAAmB,GAAG,CAAC,CAAC;EAE5B,KAAK,IAAIzC,GAAG,IAAIwC,cAAc,EAAE;IAC9B,IAAIH,aAAa,GAAGG,cAAc,CAACxC,GAAG,CAAC;IAEvC,IAAI,OAAOqC,aAAa,KAAK,UAAU,EAAE;MACvCI,mBAAmB,CAACzC,GAAG,CAAC,GAAGoC,iBAAiB,CAACC,aAAa,EAAE1D,QAAQ,CAAC;IACvE;EACF;EAEA,OAAO8D,mBAAmB;AAC5B;AAEA,SAASC,eAAe,CAAC3F,GAAG,EAAEiD,GAAG,EAAE2C,KAAK,EAAE;EACxC,IAAI3C,GAAG,IAAIjD,GAAG,EAAE;IACdE,MAAM,CAAC2F,cAAc,CAAC7F,GAAG,EAAEiD,GAAG,EAAE;MAC9B2C,KAAK,EAAEA,KAAK;MACZE,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,MAAM;IACLhG,GAAG,CAACiD,GAAG,CAAC,GAAG2C,KAAK;EAClB;EAEA,OAAO5F,GAAG;AACZ;AAEA,SAASiG,OAAO,CAACC,MAAM,EAAEC,cAAc,EAAE;EACvC,IAAIzC,IAAI,GAAGxD,MAAM,CAACwD,IAAI,CAACwC,MAAM,CAAC;EAE9B,IAAIhG,MAAM,CAACkG,qBAAqB,EAAE;IAChC1C,IAAI,CAACnC,IAAI,CAACgE,KAAK,CAAC7B,IAAI,EAAExD,MAAM,CAACkG,qBAAqB,CAACF,MAAM,CAAC,CAAC;EAC7D;EAEA,IAAIC,cAAc,EAAEzC,IAAI,GAAGA,IAAI,CAACK,MAAM,CAAC,UAAUsC,GAAG,EAAE;IACpD,OAAOnG,MAAM,CAACoG,wBAAwB,CAACJ,MAAM,EAAEG,GAAG,CAAC,CAACP,UAAU;EAChE,CAAC,CAAC;EACF,OAAOpC,IAAI;AACb;AAEA,SAAS6C,cAAc,CAACC,MAAM,EAAE;EAC9B,KAAK,IAAIxE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,SAAS,CAACwB,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC,IAAIyE,MAAM,GAAGhG,SAAS,CAACuB,CAAC,CAAC,IAAI,IAAI,GAAGvB,SAAS,CAACuB,CAAC,CAAC,GAAG,CAAC,CAAC;IAErD,IAAIA,CAAC,GAAG,CAAC,EAAE;MACTiE,OAAO,CAACQ,MAAM,EAAE,IAAI,CAAC,CAACxC,OAAO,CAAC,UAAUhB,GAAG,EAAE;QAC3C0C,eAAe,CAACa,MAAM,EAAEvD,GAAG,EAAEwD,MAAM,CAACxD,GAAG,CAAC,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI/C,MAAM,CAACwG,yBAAyB,EAAE;MAC3CxG,MAAM,CAACyG,gBAAgB,CAACH,MAAM,EAAEtG,MAAM,CAACwG,yBAAyB,CAACD,MAAM,CAAC,CAAC;IAC3E,CAAC,MAAM;MACLR,OAAO,CAACQ,MAAM,CAAC,CAACxC,OAAO,CAAC,UAAUhB,GAAG,EAAE;QACrC/C,MAAM,CAAC2F,cAAc,CAACW,MAAM,EAAEvD,GAAG,EAAE/C,MAAM,CAACoG,wBAAwB,CAACG,MAAM,EAAExD,GAAG,CAAC,CAAC;MAClF,CAAC,CAAC;IACJ;EACF;EAEA,OAAOuD,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,OAAO,GAAG;EACjB,KAAK,IAAIC,IAAI,GAAGpG,SAAS,CAACwB,MAAM,EAAE6E,KAAK,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC,EAAE5B,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG4B,IAAI,EAAE5B,IAAI,EAAE,EAAE;IACxF6B,KAAK,CAAC7B,IAAI,CAAC,GAAGxE,SAAS,CAACwE,IAAI,CAAC;EAC/B;EAEA,IAAI6B,KAAK,CAAC7E,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO,UAAU+E,GAAG,EAAE;MACpB,OAAOA,GAAG;IACZ,CAAC;EACH;EAEA,IAAIF,KAAK,CAAC7E,MAAM,KAAK,CAAC,EAAE;IACtB,OAAO6E,KAAK,CAAC,CAAC,CAAC;EACjB;EAEA,OAAOA,KAAK,CAACG,MAAM,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAClC,OAAO,YAAY;MACjB,OAAOD,CAAC,CAACC,CAAC,CAAC5B,KAAK,CAAC,KAAK,CAAC,EAAE9E,SAAS,CAAC,CAAC;IACtC,CAAC;EACH,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS2G,eAAe,GAAG;EACzB,KAAK,IAAIP,IAAI,GAAGpG,SAAS,CAACwB,MAAM,EAAEoF,WAAW,GAAG,IAAIN,KAAK,CAACF,IAAI,CAAC,EAAE5B,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG4B,IAAI,EAAE5B,IAAI,EAAE,EAAE;IAC9FoC,WAAW,CAACpC,IAAI,CAAC,GAAGxE,SAAS,CAACwE,IAAI,CAAC;EACrC;EAEA,OAAO,UAAU7E,WAAW,EAAE;IAC5B,OAAO,YAAY;MACjB,IAAIkH,KAAK,GAAGlH,WAAW,CAACmF,KAAK,CAAC,KAAK,CAAC,EAAE9E,SAAS,CAAC;MAEhD,IAAI8G,SAAS,GAAG,SAAS3F,QAAQ,GAAG;QAClC,MAAM,IAAIlB,KAAK,CAAC,iEAAiE,GAAG,yDAAyD,CAAC;MAChJ,CAAC;MAED,IAAI8G,aAAa,GAAG;QAClBrG,QAAQ,EAAEmG,KAAK,CAACnG,QAAQ;QACxBS,QAAQ,EAAE,SAASA,QAAQ,GAAG;UAC5B,OAAO2F,SAAS,CAAChC,KAAK,CAAC,KAAK,CAAC,EAAE9E,SAAS,CAAC;QAC3C;MACF,CAAC;MACD,IAAIgH,KAAK,GAAGJ,WAAW,CAACK,GAAG,CAAC,UAAUC,UAAU,EAAE;QAChD,OAAOA,UAAU,CAACH,aAAa,CAAC;MAClC,CAAC,CAAC;MACFD,SAAS,GAAGX,OAAO,CAACrB,KAAK,CAAC,KAAK,CAAC,EAAEkC,KAAK,CAAC,CAACH,KAAK,CAAC1F,QAAQ,CAAC;MACxD,OAAO2E,cAAc,CAAC,CAAC,CAAC,EAAEe,KAAK,EAAE;QAC/B1F,QAAQ,EAAE2F;MACZ,CAAC,CAAC;IACJ,CAAC;EACH,CAAC;AACH;;AAEA;AACA;AACA;AACA;;AAEA,SAASK,SAAS,GAAG,CAAC;AAEtB,IAAItD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,OAAOoD,SAAS,CAACC,IAAI,KAAK,QAAQ,IAAID,SAAS,CAACC,IAAI,KAAK,WAAW,EAAE;EACjHlF,OAAO,CAAC,8EAA8E,GAAG,uEAAuE,GAAG,oFAAoF,GAAG,mFAAmF,GAAG,gEAAgE,CAAC;AACnZ;AAEA,SAAShD,WAAW,IAAImI,yBAAyB,EAAEV,eAAe,EAAE5B,kBAAkB,EAAEpB,eAAe,EAAEwC,OAAO,EAAExG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}